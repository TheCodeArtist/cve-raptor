# cve-prev-date.py
# python script that parses a specified cvrf file and
# returns the number of CVE entries published/modified since a specified previous date.

import time
import xml.etree.ElementTree as ET

# Set prev_date = cut-off-date to filter CVEs.
# Only CVEs modified AFTER prev_date will be shown in the results.
# Date Format = yyyy-mm-dd
prev_date = '2015-10-15'

# Set the cvrf_path to the complete path to allitems-cvrf.xml
# Download available at https://cve.mitre.org/data/downloads/allitems-cvrf.xml
# Details of cvrf are available at https://cve.mitre.org/cve/cvrf.html
# NOTE: Remember to escape ALL "\" (backslashes) in path on Windows.
#       i.e. 'C:\Temp\allitems-cvrf.xml' should be 'C:\\Temp\\allitems-cvrf.xml'
cvrf_path = ''

# TODO: Add logic to early exit by checking (cvrf_header.latest_update < prev_date)
# CVRF header takes ~1KB compared to the entire allitems-cvrf.xml which is >100MB.

if (cvrf_path == ''):
    print('Set cvrf_path variable before launching this script!!')
    exit(-1)

print('Loading cvrf.xml...')
startLoadTime = time.perf_counter()
tree = ET.parse(cvrf_path)
endLoadTime = time.perf_counter()
print('Finished loading cvrf.xml.')

cve_mod_count = 0
cve_pub_count = 0
cve_count = 0

print('Parsing cvrf.xml...')
startParseTime = time.perf_counter()

ns = {'vuln': 'http://www.icasi.org/CVRF/schema/vuln/1.1'}

for vulnerability in tree.findall('vuln:Vulnerability', ns):
    title = vulnerability.find('vuln:Title', ns).text
    ordinal = vulnerability.get('Ordinal', ns)
    cve_count +=1

    for notes in vulnerability.findall('vuln:Notes', ns):
        for note in notes.findall(".//*[@Title='Published']"):
            published = note.text
            note_type = note.get('Type')
            note_title = note.get('Title')
            note_ordinal = note.get('Ordinal')
            if note.text >= prev_date:
                cve_pub_count += 1
                print(cve_mod_count + cve_pub_count, ordinal, title, note_title, note.text)

        for note in notes.findall(".//*[@Title='Modified']"):
            modified = note.text
            note_type = note.get('Type')
            note_title = note.get('Title')
            note_ordinal = note.get('Ordinal')
            if note.text >= prev_date:
                cve_mod_count += 1
                print(cve_mod_count + cve_pub_count, ordinal, title, note_title, note.text)

endParseTime = time.perf_counter()

print('Finished parsing cvrf.xml.\n')

print('%10d total CVE entries, loaded in %0.3fs, parsed in %0.3fs.' % (cve_count, endLoadTime - startLoadTime, endParseTime-startParseTime))
print('%10d new CVEs published since %s.' % (cve_pub_count, prev_date))
print('%10d existing CVEs modified since %s.\n' % (cve_mod_count, prev_date))

exit(cve_mod_count + cve_pub_count)
